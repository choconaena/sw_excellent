// client.js
import WebSocket from "ws";
import fs from "fs";

// ÏÑúÎ≤Ñ Ï£ºÏÜå
const WS_URL = "wss://safe-hi.xyz:28084"; // self-signedÎ©¥ rejectUnauthorized: false ÌïÑÏöî

// WebSocket ÏÉùÏÑ±
const ws = new WebSocket(WS_URL, {
  rejectUnauthorized: false, // ‚ö†Ô∏è self-signed Ïù∏Ï¶ùÏÑú ÌÖåÏä§Ìä∏Ïö© (Ïö¥ÏòÅÏóêÏÑúÎäî true Í∂åÏû•)
});

// Ïó∞Í≤∞ ÏÑ±Í≥µ
ws.on("open", () => {
  console.log("‚úÖ Connected to STT server");

  // 1) Ïó∞Í≤∞ ÏßÅÌõÑ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
  ws.send(
    JSON.stringify({
      reportid: 1234,
      email: "user@example.com",
    })
  );

  console.log("üì§ Sent metadata");

  // 2) Ïò§ÎîîÏò§ ÌååÏùºÏóêÏÑú Ï≤≠ÌÅ¨ Îã®ÏúÑÎ°ú ÏùΩÏñ¥ÏÑú Ï†ÑÏÜ° (Ïòà: raw PCM Îç∞Ïù¥ÌÑ∞)
  const audioStream = fs.createReadStream("./sample_audio.pcm"); // 16kHz, 16bit PCM, mono
  audioStream.on("data", (chunk) => {
    ws.send(chunk); // ÏÑúÎ≤ÑÏóê Î∞îÏù¥ÎÑàÎ¶¨ Ï≤≠ÌÅ¨ Ï†ÑÏÜ°
  });

  audioStream.on("end", () => {
    console.log("üì§ Audio stream finished");
  });
});

// ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Î©îÏãúÏßÄ ÏàòÏã†
ws.on("message", (msg) => {
  console.log("üì• STT Result:", msg.toString());
});

// Ïó∞Í≤∞ Ï¢ÖÎ£å
ws.on("close", (code, reason) => {
  console.log(`‚ùå Connection closed: ${code} ${reason}`);
});

// ÏóêÎü¨ Ìï∏Îì§ÎßÅ
ws.on("error", (err) => {
  console.error("‚ö†Ô∏è Connection error:", err);
});
